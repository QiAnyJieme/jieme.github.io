<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Your awesome title</title>
    <description>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.
</description>
    <link>http://yourdomain.com/</link>
    <atom:link href="http://yourdomain.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 01 Nov 2016 16:52:34 +0800</pubDate>
    <lastBuildDate>Tue, 01 Nov 2016 16:52:34 +0800</lastBuildDate>
    <generator>Jekyll v3.1.3</generator>
    
      <item>
        <title>Welcome to Jekyll!</title>
        <description>&lt;p&gt;You’ll find this post in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code class=&quot;highlighter-rouge&quot;&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;Tom&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints &#39;Hi, Tom&#39; to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;http://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Tue, 01 Nov 2016 15:19:30 +0800</pubDate>
        <link>http://yourdomain.com/jekyll/update/2016/11/01/welcome-to-jekyll.html</link>
        <guid isPermaLink="true">http://yourdomain.com/jekyll/update/2016/11/01/welcome-to-jekyll.html</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>Resource shrinking去掉无用的资源</title>
        <description>&lt;h1 id=&quot;resource-shrinking&quot;&gt;Resource Shrinking去掉无用的资源&lt;/h1&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;section&quot;&gt;概述&lt;/h2&gt;
&lt;p&gt;Android的Gradle构建系统支持“资源缩减”：在打包应用程序中自动删除在构建时未使用的资源。&lt;/p&gt;

&lt;p&gt;除了删除项目中在运行时实际不需要的资源之外，如果应用程序实际上不需要这些资源，那么这也会从您所依赖的库中删除资源。 例如，您的应用程序正在使用Google Play服务（例如访问Google云端硬盘功能），而您目前尚未使用Google登录，则这会删除登录按钮的各种可绘制素材资源。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;注意:&lt;/strong&gt; 它与代码混淆（例如ProGuard）结合使用，以便一旦未使用的代码被删除，任何不再被引用的资源也可以被安全地删除。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;使用方法&lt;/h2&gt;
&lt;p&gt;在项目目录下的gradle文件中进行配置：
&lt;code class=&quot;highlighter-rouge&quot;&gt;groovy
android {
    ...
    buildTypes {
        release {
            minifyEnabled true  //代码混淆
            shrinkResources true  //资源删减
            proguardFiles getDefaultProguardFile(&#39;proguard-android.txt&#39;), &#39;proguard-rules.pro&#39;
        }
    }
}
&lt;/code&gt;
不过要让shrinkResources完全起作用需要特定的版本：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;SDK Tools 25.0.10 or higher&lt;/li&gt;
  &lt;li&gt;Android Plugin for Gradle 2.0.0 or higher&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;同时，在打开&lt;code class=&quot;highlighter-rouge&quot;&gt;shrinkResources&lt;/code&gt;的时候需要确保已经打开了&lt;code class=&quot;highlighter-rouge&quot;&gt;minifyEnabled&lt;/code&gt;。&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;资源缩减&lt;/h2&gt;
&lt;p&gt;在通过配置&lt;code class=&quot;highlighter-rouge&quot;&gt;shrinkResources&lt;/code&gt;构建项目的时候会移除没有引用到的资源文件，但并不是真正的移除，而是通过将该资源文件的大小设置为0，该文件还是存在的，以确保项目结构的完整性。
在项目中可以通过&lt;code class=&quot;highlighter-rouge&quot;&gt;gradle clean assembleDebug --info | grep &quot;Skipped unused resource&quot;&lt;/code&gt;来查看详细信息。
现在项目中导入了两张没有使用的图片，分别在&lt;code class=&quot;highlighter-rouge&quot;&gt;drawable&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;mipmap&lt;/code&gt;目录下，并且开启了&lt;code class=&quot;highlighter-rouge&quot;&gt;shrinkResources&lt;/code&gt;：&lt;br /&gt;
&lt;img src=&quot;http://7xufmk.com1.z0.glb.clouddn.com/Screenshot%20from%202016-10-31%2018-09-11.png&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;
然后在命令行中查看详细信息：
&lt;img src=&quot;http://7xufmk.com1.z0.glb.clouddn.com/Screenshot%20from%202016-10-31%2018-16-37.png&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;
其中还有很多其他没有用到的系统资源文件。
然后可以在生成的apk中查看具体资源文件：
&lt;img src=&quot;http://7xufmk.com1.z0.glb.clouddn.com/Screenshot%20from%202016-10-31%2018-20-12.png&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;http://7xufmk.com1.z0.glb.clouddn.com/Screenshot%20from%202016-10-31%2018-20-34.png&quot; alt=&quot;&quot; /&gt;&lt;br /&gt;
可以看到，这两个图片的大小已经变成0了。&lt;/p&gt;

&lt;h2 id=&quot;section-3&quot;&gt;资源保留&lt;/h2&gt;
&lt;p&gt;在使用&lt;code class=&quot;highlighter-rouge&quot;&gt;shrinkResources&lt;/code&gt;的过程中可以通过手动设置的方式来确定哪些资源需要保留。
```xml
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;/p&gt;
&lt;resources xmlns:tools=&quot;http://schemas.android.com/tools&quot; tools:keep=&quot;@layout/l_used*_c,@layout/l_used_a,@layout/l_used_b*&quot; tools:discard=&quot;@layout/unused2&quot; /&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;将此文件保存在项目资源中，例如，在`res/raw/keep.xml`。而且该文件不会被打包到APK中。
其中`keep`代表需要保留下来的资源，多个资源使用`，`分开。  `discard`表示需要进行减缩的资源文件。
通过设置`keep`和`discard`可以任意配置需要保留或者减缩的资源文件。
在下面的例子中，两张图片都没有使用，但其中一张设置了`keep`：
![](http://7xufmk.com1.z0.glb.clouddn.com/Screenshot%20from%202016-10-31%2018-35-38.png)
可以看到只有photo.jpg和keep.xml被`replaced`。

具体信息可以在`&amp;lt;module-name&amp;gt;/build/outputs/mapping/debug/resources.txt`中查看，该目录下还有其他文件。

&amp;gt; dump.txt  
描述APK中所有类文件的内部结构。  
&amp;gt; mapping.txt  
提供原始和混淆的类，方法和字段名称之间的转换。  
&amp;gt; seeds.txt  
列出未被混淆的类和成员。  
&amp;gt; usage.txt  
列出从APK中移除的代码。

这些文件都是开启`minifyEnabled`后所生成的文件，具体使用请上[Google](www.google.com)。

## Strict模式
通常，构建系统可以准确地确定是否使用资源。但是，如果应用程序调用Resources＃getIdentifier（或者您的任何库执行此操作，并注意appcompat库），那么这意味着应用程序可以在运行时查找资源名称，基于它动态计算的字符串。当构建系统基于上述代码片段看到这样时，构建系统将故意地将具有前缀`img_`的所有资源标记为可能使用（因此不适合缩减）。
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;String name = String.format(“img_%1d”, angle + 1);
res = getResources().getIdentifier(name, “drawable”, getPackageName());
```
这种对于间接引用的资源可以识别出来的模式称之为&lt;code class=&quot;highlighter-rouge&quot;&gt;better safe than sorry&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;而且在这种模式下，资源缩小器还会查看代码中的所有字符串常量以及各种&lt;code class=&quot;highlighter-rouge&quot;&gt;res/raw/&lt;/code&gt; 资源，以类似于&lt;code class=&quot;highlighter-rouge&quot;&gt;file：///android_res/drawable//ic_plus_anim_016.png&lt;/code&gt;的格式查找资源URL。 如果它发现这样的字符串或其他，看起来像他们可以用于构造这样的URL，它不会删除它们。&lt;/p&gt;

&lt;p&gt;要关闭安全检查，请将&lt;code class=&quot;highlighter-rouge&quot;&gt;shrinkMode&lt;/code&gt;设置为“strict”，如以下keep.xml文件中所示：
```xml
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;/p&gt;
&lt;resources xmlns:tools=&quot;http://schemas.android.com/tools&quot; tools:shrinkmode=&quot;strict&quot; /&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;h2 id=&quot;section-4&quot;&gt;小结&lt;/h2&gt;
&lt;p&gt;在各种资源引用模式（直接引用，间接引用，未引用），以及针对不同的&lt;code class=&quot;highlighter-rouge&quot;&gt;keep&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;discard&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;shrinkMode&lt;/code&gt;的状态下，资源文件的缩减有不同的表现。
虽然在默认的&lt;code class=&quot;highlighter-rouge&quot;&gt;shrinkMode&lt;/code&gt;下可以识别出前缀为&lt;code class=&quot;highlighter-rouge&quot;&gt;img_&lt;/code&gt;的所有资源，但是并不能确保所有这种动态加载资源的方式都会有前缀，所以如果在资源文件不多并且命名比较规范的情况下可以使用默认的&lt;code class=&quot;highlighter-rouge&quot;&gt;shrinkMode&lt;/code&gt;。
但是针对资源文件比较多的项目，而且是多人协同开发，最好可以通过&lt;code class=&quot;highlighter-rouge&quot;&gt;keep.xml&lt;/code&gt;中来配置具体需要保留下来的资源文件，针对多处需要动态加载的资源可以统一管理。&lt;/p&gt;
</description>
        <pubDate>Tue, 01 Nov 2016 00:00:00 +0800</pubDate>
        <link>http://yourdomain.com/2016/11/01/Resource-Shrinking%E5%8E%BB%E6%8E%89%E6%97%A0%E7%94%A8%E7%9A%84%E8%B5%84%E6%BA%90.html</link>
        <guid isPermaLink="true">http://yourdomain.com/2016/11/01/Resource-Shrinking%E5%8E%BB%E6%8E%89%E6%97%A0%E7%94%A8%E7%9A%84%E8%B5%84%E6%BA%90.html</guid>
        
        
      </item>
    
  </channel>
</rss>
